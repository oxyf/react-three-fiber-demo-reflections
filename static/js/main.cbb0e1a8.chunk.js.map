{"version":3,"sources":["components/Cubes/Cube.js","components/Cubes/index.js","components/Lights/index.js","components/Environment/index.js","index.js"],"names":["Cube","mesh","useRef","time","_useState","useState","_useState2","Object","slicedToArray","isHovered","setIsHovered","_useState3","_useState4","isActive","setIsActive","isActiveRef","position","useMemo","random","timeMod","color","useEffect","current","useFrame","rotation","y","Math","sin","onHover","useCallback","e","value","stopPropagation","onClick","v","react_default","a","createElement","ref","onPointerOver","onPointerOut","attach","args","roughness","metalness","Cubes","group","nodesCubes","map","Array","el","i","key","Lights","FakeSphere","intensity","Environment","side","BackSide","App","Fragment","web","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.cbb0e1a8.chunk.js","sourcesContent":["import React, {\n  useMemo,\n  useRef,\n  useState,\n  useEffect,\n  useCallback\n} from \"react\";\nimport { random } from \"lodash\";\nimport { useFrame } from \"react-three-fiber\";\n\nexport default () => {\n  const mesh = useRef();\n  const time = useRef(0);\n\n  const [isHovered, setIsHovered] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  const isActiveRef = useRef(isActive);\n\n  // position\n  const position = useMemo(() => {\n    return [random(-3, 3, true), random(-3, 3, true), random(-3, 3, true)];\n  }, []);\n\n  // random time mod factor\n  const timeMod = useMemo(() => random(0.1, 4, true), []);\n\n  // color\n  const color = isHovered ? 0xe5d54d : (isActive ? 0x1F77B4 : 0xf95b3c);\n\n  //useEffect of the activeState\n  useEffect(() => {\n    isActiveRef.current = isActive;\n  }, [isActive]);\n\n  // raf loop\n  useFrame(() => {\n    mesh.current.rotation.y += 0.01 * timeMod;\n    if (isActiveRef.current) {\n      time.current += 0.03;\n      mesh.current.position.y = position[1] + Math.sin(time.current) * 0.4;\n    }\n  });\n\n  // Events\n  const onHover = useCallback(\n    (e, value) => {\n      e.stopPropagation();\n      setIsHovered(value);\n    },\n    [setIsHovered]\n  );\n\n  const onClick = useCallback(\n    e => {\n      e.stopPropagation();\n      setIsActive(v => !v);\n    },\n    [setIsActive]\n  );\n\n  return (\n    <mesh\n      ref={mesh}\n      position={position}\n      onClick={e => onClick(e)}\n      onPointerOver={e => onHover(e, true)}\n      onPointerOut={e => onHover(e, false)}\n    >\n      <boxBufferGeometry attach=\"geometry\" args={[0.047, 0.5, 0.29]} />\n      <meshStandardMaterial\n        attach=\"material\"\n        color={color}\n        roughness={0.6}\n        metalness={0.1}\n      />\n    </mesh>\n  );\n};","import React, { useRef } from \"react\";\nimport { map } from \"lodash\";\nimport { useFrame } from \"react-three-fiber\";\n\nimport Cube from \"./Cube\";\n\nexport default () => {\n  const group = useRef();\n\n  useFrame(() => {\n    group.current.rotation.y += 0.005;\n  });\n\n  const nodesCubes = map(new Array(50), (el, i) => {\n    return <Cube key={i} />;\n  });\n\n  return <group ref={group}>{nodesCubes}</group>;\n};\n","import React from \"react\";\n\nexport default () => {\n  const FakeSphere = () => {\n    return (\n      <mesh>\n        <sphereBufferGeometry args={[0.7, 30, 30]} attach=\"geometry\" />\n        <meshBasicMaterial color={0xfff1ef} attach=\"material\" />\n      </mesh>\n    );\n  };\n\n  return (\n    <group>\n      <FakeSphere />\n      <ambientLight intensity={0.9} />\n      <pointLight intensity={1.12} position={[0, 0, 0]} />\n    </group>\n  );\n};\n","import React from \"react\";\nimport { BackSide } from \"three\";\n\nexport default () => {\n  return (\n    <mesh>\n      <sphereBufferGeometry args={[5, 10, 10]} attach=\"geometry\" />\n      <meshStandardMaterial\n        color={0x343434}\n        attach=\"material\"\n        side={BackSide}\n        metalness={0.4}\n      />\n    </mesh>\n  );\n};\n","import \"./styles.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Canvas } from \"react-three-fiber\";\nimport Cubes from \"./components/Cubes\";\nimport Lights from \"./components/Lights\";\nimport Environment from \"./components/Environment\";\n\nfunction App() {\n  return (\n    <>\n      <Canvas>\n        <Cubes />\n        <Lights />\n        <Environment />\n      </Canvas>\n    </>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}